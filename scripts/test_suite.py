#!/usr/bin/env python3
"""
Suite de tests automatis√©s pour AOC Timer Map
Tests API, endpoints, et interface avec Selenium
"""

import subprocess
import json
import time
import sys
import os
from urllib.parse import urlparse

class TestSuite:
    def __init__(self, base_url="http://localhost:9090", username="invicta", password="invicta"):
        self.base_url = base_url
        self.auth = f"{username}:{password}"
        self.results = []
        
    def run_curl_test(self, name, url, expected_status=200, auth=True, check_content=None):
        """Ex√©cute un test curl et v√©rifie le r√©sultat"""
        auth_flag = f"-u {self.auth}" if auth else ""
        cmd = f"curl -s -o /dev/null -w '%{{http_code}}' {auth_flag} '{url}'"
        
        try:
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=10)
            status_code = int(result.stdout.strip())
            
            success = status_code == expected_status
            self.results.append({
                'test': name,
                'type': 'curl',
                'status': status_code,
                'expected': expected_status,
                'success': success,
                'url': url
            })
            
            status_icon = "‚úÖ" if success else "‚ùå"
            print(f"{status_icon} {name}: {status_code} (attendu: {expected_status})")
            
            return success
            
        except Exception as e:
            self.results.append({
                'test': name,
                'type': 'curl',
                'error': str(e),
                'success': False,
                'url': url
            })
            print(f"‚ùå {name}: Erreur - {e}")
            return False
    
    def run_content_test(self, name, url, expected_content, auth=True):
        """Test le contenu d'une r√©ponse"""
        auth_flag = f"-u {self.auth}" if auth else ""
        cmd = f"curl -s {auth_flag} '{url}'"
        
        try:
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=10)
            content = result.stdout
            
            if expected_content in content:
                print(f"‚úÖ {name}: Contenu trouv√©")
                self.results.append({'test': name, 'type': 'content', 'success': True})
                return True
            else:
                print(f"‚ùå {name}: Contenu manquant")
                print(f"   Recherch√©: {expected_content}")
                print(f"   Re√ßu: {content[:100]}...")
                self.results.append({'test': name, 'type': 'content', 'success': False})
                return False
                
        except Exception as e:
            print(f"‚ùå {name}: Erreur - {e}")
            self.results.append({'test': name, 'type': 'content', 'error': str(e), 'success': False})
            return False
    
    def test_static_files(self):
        """Test les fichiers statiques (JS, CSS)"""
        print("\nüìÅ Tests des fichiers statiques:")
        
        # Test des fichiers JS et CSS via /map/
        js_files = ["main-T3EQFCJX.js", "polyfills-Q763KACN.js", "chunk-ZHYZGWJY.js"]
        css_files = ["styles-GUDYXLDC.css"]
        
        for js_file in js_files:
            self.run_curl_test(f"JS via /map/: {js_file}", f"{self.base_url}/map/{js_file}", 200, False)
        
        for css_file in css_files:
            self.run_curl_test(f"CSS via /map/: {css_file}", f"{self.base_url}/map/{css_file}", 200, False)
    
    def test_api_endpoints(self):
        """Test les endpoints API"""
        print("\nüîå Tests des APIs:")
        
        # Test API markers
        self.run_curl_test("API Markers", f"{self.base_url}/api.php", 200, True)
        
        # Test API named mobs
        self.run_curl_test("API Named Mobs", f"{self.base_url}/named_mobs_api.php", 200, True)
        
        # Test contenu API
        self.run_content_test("API Markers Data", f"{self.base_url}/api.php", '"id":', True)
        self.run_content_test("Named Mobs Triangulation", f"{self.base_url}/named_mobs_api.php", '"map_lat":', True)
    
    def test_pages(self):
        """Test les pages principales"""
        print("\nüìÑ Tests des pages:")
        
        # Test page principale
        self.run_curl_test("Page principale", f"{self.base_url}/", 200, True)
        
        # Test page map
        self.run_curl_test("Page map", f"{self.base_url}/map/", 200, True)
        
        # Test contenu Angular
        self.run_content_test("Angular app-root", f"{self.base_url}/map/", "<app-root>", True)
        self.run_content_test("Scripts JS charg√©s", f"{self.base_url}/map/", "main-T3EQFCJX.js", True)
    
    def test_authentication(self):
        """Test l'authentification"""
        print("\nüîê Tests d'authentification:")
        
        # Test sans auth (doit √©chouer)
        self.run_curl_test("Sans auth (doit √©chouer)", f"{self.base_url}/api.php", 401, False)
        
        # Test avec mauvais credentials
        cmd = f"curl -s -o /dev/null -w '%{{http_code}}' -u wrong:credentials '{self.base_url}/api.php'"
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        status = int(result.stdout.strip())
        if status == 401:
            print("‚úÖ Mauvais credentials rejet√©s: 401")
        else:
            print(f"‚ùå Mauvais credentials accept√©s: {status}")
    
    def test_reference_points(self):
        """Test les points de r√©f√©rence pour la triangulation"""
        print("\nüéØ Tests des points de r√©f√©rence:")
        
        ref_points = ["wormwig", "ysshokk", "olive"]
        
        for ref in ref_points:
            cmd = f"curl -s -u {self.auth} '{self.base_url}/named_mobs_api.php' | grep -i '{ref}' | head -1"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.stdout.strip():
                print(f"‚úÖ Point de r√©f√©rence {ref}: Trouv√©")
                # V√©rifier les coordonn√©es triangul√©es
                if '"map_lat":' in result.stdout and '"map_lng":' in result.stdout:
                    print(f"   ‚úÖ Coordonn√©es triangul√©es pr√©sentes")
                else:
                    print(f"   ‚ùå Coordonn√©es triangul√©es manquantes")
            else:
                print(f"‚ùå Point de r√©f√©rence {ref}: Non trouv√©")
    
    def run_selenium_test(self):
        """Test avec Selenium si disponible"""
        print("\nüåê Test Selenium (optionnel):")
        
        try:
            # V√©rifier si Selenium est disponible
            subprocess.run(["python3", "-c", "import selenium"], check=True, capture_output=True)
            
            # Lancer le test Selenium
            selenium_script = """
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time

options = Options()
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--disable-gpu')

try:
    driver = webdriver.Chrome(options=options)
    driver.get('http://invicta:invicta@localhost:9090/map/')
    time.sleep(3)
    
    title = driver.title
    print(f'‚úÖ Selenium - Titre: {title}')
    
    # V√©rifier app-root
    app_root = driver.find_element(By.TAG_NAME, 'app-root')
    print('‚úÖ Selenium - app-root trouv√©')
    
    # V√©rifier les erreurs JS
    logs = driver.get_log('browser')
    errors = [log for log in logs if log['level'] == 'SEVERE']
    
    if errors:
        print(f'‚ö†Ô∏è  Selenium - {len(errors)} erreurs JS d√©tect√©es')
        for error in errors[:2]:
            print(f'   - {error["message"][:60]}...')
    else:
        print('‚úÖ Selenium - Aucune erreur JS critique')
        
except Exception as e:
    print(f'‚ùå Selenium - Erreur: {e}')
finally:
    try:
        driver.quit()
    except:
        pass
"""
            
            result = subprocess.run(["python3", "-c", selenium_script], 
                                  capture_output=True, text=True, timeout=30)
            print(result.stdout)
            if result.stderr:
                print(f"Selenium warnings: {result.stderr}")
                
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è  Selenium non disponible (optionnel)")
        except Exception as e:
            print(f"‚ö†Ô∏è  Selenium test √©chou√©: {e}")
    
    def generate_report(self):
        """G√©n√®re un rapport des tests"""
        print("\n" + "=" * 50)
        print("üìä RAPPORT DES TESTS")
        print("=" * 50)
        
        total_tests = len(self.results)
        successful_tests = len([r for r in self.results if r.get('success', False)])
        
        print(f"üéØ Total: {total_tests} tests")
        print(f"‚úÖ R√©ussis: {successful_tests}")
        print(f"‚ùå √âchecs: {total_tests - successful_tests}")
        print(f"üìä Taux de r√©ussite: {(successful_tests/total_tests*100):.1f}%")
        
        # D√©tails des √©checs
        failures = [r for r in self.results if not r.get('success', False)]
        if failures:
            print(f"\n‚ùå √âchecs d√©taill√©s:")
            for failure in failures:
                print(f"   - {failure['test']}: {failure.get('error', '√âchec')}")
        
        # Sauvegarde du rapport
        report = {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'total_tests': total_tests,
            'successful_tests': successful_tests,
            'success_rate': successful_tests/total_tests*100,
            'results': self.results
        }
        
        with open('/tmp/aoc_test_report.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        print(f"\nüìÑ Rapport sauv√©: /tmp/aoc_test_report.json")
        
        return successful_tests == total_tests

def main():
    print("üß™ AOC Timer Map - Suite de tests automatis√©s")
    print("=" * 50)
    
    # V√©rifier que le service est d√©marr√©
    try:
        result = subprocess.run("curl -s -o /dev/null -w '%{http_code}' http://localhost:9090/", 
                              shell=True, capture_output=True, text=True, timeout=5)
        if result.stdout.strip() not in ["200", "401"]:  # 401 OK car page n√©cessite auth
            print("‚ùå Service non disponible sur localhost:9090")
            print("   Lancez d'abord: make local")
            sys.exit(1)
    except:
        print("‚ùå Impossible de contacter le service")
        sys.exit(1)
    
    suite = TestSuite()
    
    # Ex√©cuter tous les tests
    suite.test_static_files()
    suite.test_api_endpoints() 
    suite.test_pages()
    suite.test_authentication()
    suite.test_reference_points()
    suite.run_selenium_test()
    
    # G√©n√©rer le rapport
    all_passed = suite.generate_report()
    
    if all_passed:
        print("\nüéâ Tous les tests sont pass√©s !")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è  Certains tests ont √©chou√©")
        sys.exit(1)

if __name__ == "__main__":
    main()
